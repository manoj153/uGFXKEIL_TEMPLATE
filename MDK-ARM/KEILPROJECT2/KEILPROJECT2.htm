<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [KEILPROJECT2\KEILPROJECT2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image KEILPROJECT2\KEILPROJECT2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat Aug 19 19:36:30 2017
<BR><P>
<H3>Maximum Stack Usage =        480 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
gwinButtonDraw_Rounded &rArr; gdispGFillRoundedBox &rArr; gdispGFillArc &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[94]">WM_Move</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93]">WM_Size</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[97]">AfterClear</a> from gfx_mk.o(i.AfterClear) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9d]">ButtonKeyboard</a> from gfx_mk.o(i.ButtonKeyboard) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[9b]">ButtonMouseDown</a> from gfx_mk.o(i.ButtonMouseDown) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[9c]">ButtonMouseUp</a> from gfx_mk.o(i.ButtonMouseUp) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[70]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a0]">CheckboxKeyboard</a> from gfx_mk.o(i.CheckboxKeyboard) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[9f]">CheckboxMouseDown</a> from gfx_mk.o(i.CheckboxMouseDown) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[a8]">ContainerBorderSize</a> from gfx_mk.o(i.ContainerBorderSize) referenced 4 times from gfx_mk.o(.constdata)
 <LI><a href="#[61]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">DMA2D_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[80]">GTimerThreadHandler</a> from gfx_mk.o(i.GTimerThreadHandler) referenced from gfx_mk.o(i.gtimerStart)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[72]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[71]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a1]">ImageDestroy</a> from gfx_mk.o(i.ImageDestroy) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[a2]">ImageRedraw</a> from gfx_mk.o(i.ImageRedraw) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[77]">ImageTimer</a> from gfx_mk.o(i.ImageTimer) referenced from gfx_mk.o(i.ImageRedraw)
 <LI><a href="#[aa]">KeyMouseMove</a> from gfx_mk.o(i.KeyMouseMove) referenced 2 times from gfx_mk.o(.constdata)
 <LI><a href="#[ab]">KeyMouseUp</a> from gfx_mk.o(i.KeyMouseUp) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[6f]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">LTDC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[c5]">MEMRead</a> from gfx_mk.o(i.MEMRead) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c7]">MEMSetpos</a> from gfx_mk.o(i.MEMSetpos) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c6]">MEMWrite</a> from gfx_mk.o(i.MEMWrite) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[79]">MousePoll</a> from gfx_mk.o(i.MousePoll) referenced from gfx_mk.o(i._gmouseInitDriver)
 <LI><a href="#[a]">NMI_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6e]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b2]">ROMClose</a> from gfx_mk.o(i.ROMClose) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b6]">ROMEof</a> from gfx_mk.o(i.ROMEof) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[af]">ROMExists</a> from gfx_mk.o(i.ROMExists) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b0]">ROMFilesize</a> from gfx_mk.o(i.ROMFilesize) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b5]">ROMGetsize</a> from gfx_mk.o(i.ROMGetsize) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b1]">ROMOpen</a> from gfx_mk.o(i.ROMOpen) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b3]">ROMRead</a> from gfx_mk.o(i.ROMRead) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b4]">ROMSetpos</a> from gfx_mk.o(i.ROMSetpos) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a5]">RadioMouseDown</a> from gfx_mk.o(i.RadioMouseDown) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[7b]">RedrawTimerFn</a> from gfx_mk.o(i.RedrawTimerFn) referenced from gfx_mk.o(i._gwmInit)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6d]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[cd]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[d1]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[cf]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[ce]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[d0]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[73]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[75]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">TIM6_DAC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[ae]">TextEditKeyboard</a> from gfx_mk.o(i.TextEditKeyboard) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[ad]">TextEditMouseDown</a> from gfx_mk.o(i.TextEditMouseDown) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[90]">WM_Add</a> from gfx_mk.o(i.WM_Add) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[8f]">WM_DeInit</a> from gfx_mk.o(i.WM_DeInit) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[91]">WM_Delete</a> from gfx_mk.o(i.WM_Delete) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[8e]">WM_Init</a> from gfx_mk.o(i.WM_Init) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[96]">WM_MinMax</a> from gfx_mk.o(i.WM_MinMax) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[94]">WM_Move</a> from gfx_mk.o(i.WM_Move) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[95]">WM_Raise</a> from gfx_mk.o(i.WM_Raise) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[92]">WM_Redraw</a> from gfx_mk.o(i.WM_Redraw) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[93]">WM_Size</a> from gfx_mk.o(i.WM_Size) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[76]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[a6]">_gcontainerDestroy</a> from gfx_mk.o(i._gcontainerDestroy) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[84]">_gdispDeInitDriver</a> from gfx_mk.o(i._gdispDeInitDriver) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[82]">_gdispInitDriver</a> from gfx_mk.o(i._gdispInitDriver) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[83]">_gdispPostInitDriver</a> from gfx_mk.o(i._gdispPostInitDriver) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[ca]">_gmouseDeInitDriver</a> from gfx_mk.o(i._gmouseDeInitDriver) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[c8]">_gmouseInitDriver</a> from gfx_mk.o(i._gmouseInitDriver) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[c9]">_gmousePostInitDriver</a> from gfx_mk.o(i._gmousePostInitDriver) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[78]">_gwidgetCreate</a> from gfx_mk.o(i._gwidgetCreate) referenced from gfx_mk.o(i.SendCheckboxEvent)
 <LI><a href="#[78]">_gwidgetCreate</a> from gfx_mk.o(i._gwidgetCreate) referenced from gfx_mk.o(i.SendRadioEvent)
 <LI><a href="#[78]">_gwidgetCreate</a> from gfx_mk.o(i._gwidgetCreate) referenced from gfx_mk.o(i._gwinSendEvent)
 <LI><a href="#[78]">_gwidgetCreate</a> from gfx_mk.o(i._gwidgetCreate) referenced from gfx_mk.o(i.gwinAttachListener)
 <LI><a href="#[98]">_gwidgetDestroy</a> from gfx_mk.o(i._gwidgetDestroy) referenced 6 times from gfx_mk.o(.constdata)
 <LI><a href="#[99]">_gwidgetRedraw</a> from gfx_mk.o(i._gwidgetRedraw) referenced 7 times from gfx_mk.o(.constdata)
 <LI><a href="#[7e]">drawcharglyph</a> from gfx_mk.o(i.drawcharglyph) referenced from gfx_mk.o(i.gdispGDrawStringBox)
 <LI><a href="#[7d]">drawcharline</a> from gfx_mk.o(i.drawcharline) referenced from gfx_mk.o(i.drawcharglyph)
 <LI><a href="#[7d]">drawcharline</a> from gfx_mk.o(i.drawcharline) referenced from gfx_mk.o(i.fillcharglyph)
 <LI><a href="#[7d]">drawcharline</a> from gfx_mk.o(i.drawcharline) referenced from gfx_mk.o(i.gdispGDrawChar)
 <LI><a href="#[bc]">fatfsClose</a> from gfx_mk.o(i.fatfsClose) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b7]">fatfsDel</a> from gfx_mk.o(i.fatfsDel) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c1]">fatfsEOF</a> from gfx_mk.o(i.fatfsEOF) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b8]">fatfsExists</a> from gfx_mk.o(i.fatfsExists) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[b9]">fatfsFileSize</a> from gfx_mk.o(i.fatfsFileSize) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c0]">fatfsGetSize</a> from gfx_mk.o(i.fatfsGetSize) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c2]">fatfsMount</a> from gfx_mk.o(i.fatfsMount) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[bb]">fatfsOpen</a> from gfx_mk.o(i.fatfsOpen) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[bd]">fatfsRead</a> from gfx_mk.o(i.fatfsRead) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[ba]">fatfsRename</a> from gfx_mk.o(i.fatfsRename) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[bf]">fatfsSetPos</a> from gfx_mk.o(i.fatfsSetPos) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c4]">fatfsSync</a> from gfx_mk.o(i.fatfsSync) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[c3]">fatfsUnmount</a> from gfx_mk.o(i.fatfsUnmount) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[be]">fatfsWrite</a> from gfx_mk.o(i.fatfsWrite) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[7f]">fillcharglyph</a> from gfx_mk.o(i.fillcharglyph) referenced from gfx_mk.o(i.gdispGFillStringBox)
 <LI><a href="#[cb]">ft5336Init</a> from gmouse_lld_ft5336.o(i.ft5336Init) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[cc]">ft5336ReadXYZ</a> from gmouse_lld_ft5336.o(i.ft5336ReadXYZ) referenced from gmouse_lld_ft5336.o(.constdata)
 <LI><a href="#[4]">gdispGImageDraw_BMP</a> from gfx_mk.o(i.gdispGImageDraw_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[8]">gdispImageAdjustPalette_BMP</a> from gfx_mk.o(i.gdispImageAdjustPalette_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[3]">gdispImageCache_BMP</a> from gfx_mk.o(i.gdispImageCache_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[2]">gdispImageClose_BMP</a> from gfx_mk.o(i.gdispImageClose_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[6]">gdispImageGetPaletteSize_BMP</a> from gfx_mk.o(i.gdispImageGetPaletteSize_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[7]">gdispImageGetPalette_BMP</a> from gfx_mk.o(i.gdispImageGetPalette_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[5]">gdispImageNext_BMP</a> from gfx_mk.o(i.gdispImageNext_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[1]">gdispImageOpen_BMP</a> from gfx_mk.o(i.gdispImageOpen_BMP) referenced 2 times from gfx_mk.o(.data)
 <LI><a href="#[89]">gdisp_lld_control</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_control) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[86]">gdisp_lld_draw_pixel</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_draw_pixel) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[87]">gdisp_lld_fill_area</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_fill_area) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[88]">gdisp_lld_get_pixel_color</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_get_pixel_color) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[85]">gdisp_lld_init</a> from gdisp_lld_stm32ltdc.o(i.gdisp_lld_init) referenced from gdisp_lld_stm32ltdc.o(.constdata)
 <LI><a href="#[7a]">gwidgetEvent</a> from gfx_mk.o(i.gwidgetEvent) referenced from gfx_mk.o(i._gwidgetInit)
 <LI><a href="#[9a]">gwinButtonDraw_Normal</a> from gfx_mk.o(i.gwinButtonDraw_Normal) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[7c]">gwinButtonDraw_Rounded</a> from gfx_mk.o(i.gwinButtonDraw_Rounded) referenced from gui.o(i.createPagePage0)
 <LI><a href="#[9e]">gwinCheckboxDraw_CheckOnLeft</a> from gfx_mk.o(i.gwinCheckboxDraw_CheckOnLeft) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[a7]">gwinContainerDraw_Std</a> from gfx_mk.o(i.gwinContainerDraw_Std) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[a9]">gwinKeyboardDraw_Normal</a> from gfx_mk.o(i.gwinKeyboardDraw_Normal) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[a3]">gwinLabelDrawJustifiedLeft</a> from gfx_mk.o(i.gwinLabelDrawJustifiedLeft) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[a4]">gwinRadioDraw_Radio</a> from gfx_mk.o(i.gwinRadioDraw_Radio) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[ac]">gwinTexteditDefaultDraw</a> from gfx_mk.o(i.gwinTexteditDefaultDraw) referenced from gfx_mk.o(.constdata)
 <LI><a href="#[74]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8a]">mf_rlefont_character_width</a> from gfx_mk.o(i.mf_rlefont_character_width) referenced 3 times from gfx_mk.o(.constdata)
 <LI><a href="#[8b]">mf_rlefont_render_character</a> from gfx_mk.o(i.mf_rlefont_render_character) referenced 3 times from gfx_mk.o(.constdata)
 <LI><a href="#[8c]">mf_scaled_character_width</a> from gfx_mk.o(i.mf_scaled_character_width) referenced 2 times from gfx_mk.o(.constdata)
 <LI><a href="#[8d]">mf_scaled_render_character</a> from gfx_mk.o(i.mf_scaled_render_character) referenced 2 times from gfx_mk.o(.constdata)
 <LI><a href="#[81]">scaled_pixel_callback</a> from gfx_mk.o(i.scaled_pixel_callback) referenced from gfx_mk.o(i.mf_scaled_render_character)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[2cd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d3]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2ce]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2cf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2d0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2d1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2d2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[296]"></a>__asm___8_gfx_mk_c_gfxInit___gfxTaskSwitch</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gfx_mk.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
</UL>

<P><STRONG><a name="[d5]"></a>__asm___8_gfx_mk_c_gfxInit___gfxStartThread</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gfx_mk.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizeText
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditKeyboard
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMRead
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMWrite
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMRead
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxRealloc
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[2d3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2d4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>

<P><STRONG><a name="[2d6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[184]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizeText
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditMouseDown
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditKeyboard
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInfo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[1a7]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[2d8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[dc]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[d4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2db]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2dc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>BSP_SDRAM_Init</STRONG> (Thumb, 102 bytes, Stack size 88 bytes, stm32f746g_discovery_sdram.o(i.BSP_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[f1]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[f3]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[f5]"></a>BSP_SD_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[f6]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[f9]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[fb]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[110]"></a>FATFS_LinkDriver</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[111]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[146]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[147]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[18a]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 414 bytes, Stack size 12 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f7xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[ee]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[18e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
</UL>

<P><STRONG><a name="[190]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_I2C_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[122]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_LTDC_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[123]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[130]"></a>HAL_QSPI_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2322 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[135]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[138]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[137]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[139]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[136]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[13a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1252 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[196]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_RTCEx_SetTimeStamp</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, stm32f7xx_hal_rtc_ex.o(i.HAL_RTCEx_SetTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_SetTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_RTC_SetAlarm</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[144]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 496 bytes, Stack size 12 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[f2]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[f4]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[f7]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_SD_InitCard</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_SD_MspInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 586 bytes, Stack size 64 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_ReadBlocks &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[fc]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, stm32f7xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>

<P><STRONG><a name="[15a]"></a>HAL_SPDIFRX_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f7xx_hal_spdifrx.o(i.HAL_SPDIFRX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPDIFRX_Init &rArr; HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_SPDIFRX_MspInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_SPDIFRX_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_SPI_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[15f]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[15e]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19e]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[19d]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[160]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[161]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[169]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC6_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[173]"></a>HAL_UART_MspInit</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[182]"></a>LogInfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usersdcard.o(i.LogInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LogInfo &rArr; gfileOpen &rArr; testopen
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[18b]"></a>MX_FATFS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
</UL>

<P><STRONG><a name="[13f]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
</UL>

<P><STRONG><a name="[13d]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f7xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1aa]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1ad]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[151]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1af]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[1b0]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1b2]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[153]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[154]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[1b4]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1b5]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1b7]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDMMC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1b8]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1b9]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>

<P><STRONG><a name="[1ba]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[156]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[157]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[158]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[152]"></a>SDMMC_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1bc]"></a>SDMMC_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[1bf]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1bd]"></a>SDMMC_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[14a]"></a>SDMMC_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[14e]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[155]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1ab]"></a>SDMMC_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[159]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[cd]"></a>SD_initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>SD_ioctl</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_ioctl &rArr; BSP_SD_GetCardInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>SD_read</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>SD_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_status &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>SD_write</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>SystemClock_Config</STRONG> (Thumb, 290 bytes, Stack size 216 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[164]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[16a]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[16b]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[16c]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[16d]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[175]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[176]"></a>UART_CheckIdleState</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[174]"></a>UART_SetConfig</STRONG> (Thumb, 858 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1cd]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[189]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[1e5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1d9]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[1e0]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[1e2]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[1dd]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1df]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1e4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1de]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1dc]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1db]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1e6]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[2de]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2df]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2e0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1da]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1e7]"></a>_gcontainerCreate</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gfx_mk.o(i._gcontainerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gcontainerCreate &rArr; _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
</UL>

<P><STRONG><a name="[a6]"></a>_gcontainerDestroy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gfx_mk.o(i._gcontainerDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _gcontainerDestroy &rArr; gwinDestroy &rArr; _gwinDestroy &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinDestroy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>_gcontainerInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i._gcontainerInit))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[84]"></a>_gdispDeInitDriver</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gfx_mk.o(i._gdispDeInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gdispDeInitDriver &rArr; gdriverGetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>_gdispInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gfx_mk.o(i._gdispInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gdispInit &rArr; gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[82]"></a>_gdispInitDriver</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gfx_mk.o(i._gdispInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _gdispInitDriver &rArr; gdisp_lld_init &rArr; BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>_gdispPostInitDriver</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfx_mk.o(i._gdispPostInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _gdispPostInitDriver &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>_gdriverInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i._gdriverInit))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[1ed]"></a>_geventInit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, gfx_mk.o(i._geventInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _geventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[286]"></a>_gfileFindSlot</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, gfx_mk.o(i._gfileFindSlot))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpenMemory
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
</UL>

<P><STRONG><a name="[28b]"></a>_gfileInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i._gfileInit))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[1ee]"></a>_ginputInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gfx_mk.o(i._ginputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ginputInit &rArr; _gmouseInit &rArr; gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[ca]"></a>_gmouseDeInitDriver</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i._gmouseDeInitDriver))
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>_gmouseInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gfx_mk.o(i._gmouseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gmouseInit &rArr; gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ginputInit
</UL>

<P><STRONG><a name="[c8]"></a>_gmouseInitDriver</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gfx_mk.o(i._gmouseInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gmouseInitDriver &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerIsActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>_gmousePostInitDriver</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gfx_mk.o(i._gmousePostInitDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _gmousePostInitDriver &rArr; CalibrateMouse &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>_gosHeapInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gfx_mk.o(i._gosHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _gosHeapInit &rArr; gfxAddHeapBlock &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAddHeapBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
</UL>

<P><STRONG><a name="[1f3]"></a>_gosInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(i._gosInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _gosInit &rArr; _gosHeapInit &rArr; gfxAddHeapBlock &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosThreadsInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[28c]"></a>_gosPostInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i._gosPostInit))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[1f4]"></a>_gosThreadsInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gfx_mk.o(i._gosThreadsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gosThreadsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
</UL>

<P><STRONG><a name="[289]"></a>_gqueueInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i._gqueueInit))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[1f6]"></a>_gtimerInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gfx_mk.o(i._gtimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gtimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[78]"></a>_gwidgetCreate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gfx_mk.o(i._gwidgetCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGKeyboardCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerCreate
</UL>
<BR>[Address Reference Count : 4]<UL><LI> gfx_mk.o(i.SendCheckboxEvent)
<LI> gfx_mk.o(i.SendRadioEvent)
<LI> gfx_mk.o(i._gwinSendEvent)
<LI> gfx_mk.o(i.gwinAttachListener)
</UL>
<P><STRONG><a name="[98]"></a>_gwidgetDestroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gfx_mk.o(i._gwidgetDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _gwidgetDestroy &rArr; geventDetachSourceListeners &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFixFocus
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>_gwidgetDrawFocusRect</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, gfx_mk.o(i._gwidgetDrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _gwidgetDrawFocusRect &rArr; gdispGDrawBox &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[1fe]"></a>_gwidgetInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gfx_mk.o(i._gwidgetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _gwidgetInit &rArr; geventAttachSource &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ginputGetMouse
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ginputGetKeyboard
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventListenerInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[99]"></a>_gwidgetRedraw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gfx_mk.o(i._gwidgetRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gwidgetRedraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>_gwinDestroy</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gfx_mk.o(i._gwinDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _gwinDestroy &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinDestroy
</UL>

<P><STRONG><a name="[205]"></a>_gwinDrawEnd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gfx_mk.o(i._gwinDrawEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinClear
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
</UL>

<P><STRONG><a name="[206]"></a>_gwinDrawStart</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gfx_mk.o(i._gwinDrawStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinClear
</UL>

<P><STRONG><a name="[1f9]"></a>_gwinFixFocus</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, gfx_mk.o(i._gwinFixFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _gwinFixFocus
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinRippleVisibility
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
</UL>

<P><STRONG><a name="[1a9]"></a>_gwinFlushRedraws</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, gfx_mk.o(i._gwinFlushRedraws))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedrawTimerFn
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedraw
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
</UL>

<P><STRONG><a name="[207]"></a>_gwinInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gfx_mk.o(i._gwinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gwinInit &rArr; _gwmInit &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
</UL>

<P><STRONG><a name="[1ca]"></a>_gwinMoveFocus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gfx_mk.o(i._gwinMoveFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _gwinMoveFocus &rArr; gwinSetFocus &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFocus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwidgetEvent
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditKeyboard
</UL>

<P><STRONG><a name="[20b]"></a>_gwinRippleVisibility</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, gfx_mk.o(i._gwinRippleVisibility))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _gwinRippleVisibility &rArr; _gwinFixFocus
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFixFocus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
</UL>

<P><STRONG><a name="[fd]"></a>_gwinSendEvent</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gfx_mk.o(i._gwinSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _gwinSendEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseUp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonKeyboard
</UL>

<P><STRONG><a name="[fe]"></a>_gwinUpdate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gfx_mk.o(i._gwinUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditMouseDown
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditKeyboard
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMouseUp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMouseMove
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTimer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckboxMouseDown
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckboxKeyboard
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseUp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonMouseDown
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetStyle
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFocus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
</UL>

<P><STRONG><a name="[20f]"></a>_gwinWMAdd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gfx_mk.o(i._gwinWMAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gwinWMAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>

<P><STRONG><a name="[1f8]"></a>_gwindowCreate</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gfx_mk.o(i._gwindowCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinWMAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>

<P><STRONG><a name="[208]"></a>_gwmInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gfx_mk.o(i._gwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gwmInit &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncInit
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
</UL>

<P><STRONG><a name="[25f]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2bf]"></a>disk_ioctl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[248]"></a>disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[25e]"></a>disk_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[23a]"></a>disk_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[244]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gfx_mk.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsClose
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[247]"></a>f_lseek</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, gfx_mk.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSetPos
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, gfx_mk.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsMount
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24c]"></a>f_open</STRONG> (Thumb, 484 bytes, Stack size 104 bytes, gfx_mk.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsOpen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[254]"></a>f_read</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, gfx_mk.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsRead
</UL>

<P><STRONG><a name="[255]"></a>f_rename</STRONG> (Thumb, 282 bytes, Stack size 152 bytes, gfx_mk.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_rename &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsRename
</UL>

<P><STRONG><a name="[257]"></a>f_stat</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, gfx_mk.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsFileSize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsExists
</UL>

<P><STRONG><a name="[245]"></a>f_sync</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gfx_mk.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsWrite
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsSync
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsOpen
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[25a]"></a>f_unlink</STRONG> (Thumb, 170 bytes, Stack size 112 bytes, gfx_mk.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsDel
</UL>

<P><STRONG><a name="[25b]"></a>f_write</STRONG> (Thumb, 478 bytes, Stack size 64 bytes, gfx_mk.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsWrite
</UL>

<P><STRONG><a name="[1e3]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[260]"></a>fnprintg</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, gfx_mk.o(i.fnprintg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fnprintg &rArr; vfnprintg &rArr; gfileWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfnprintg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[29a]"></a>gdispBlendColor</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gfx_mk.o(i.gdispBlendColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gdispBlendColor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[10b]"></a>gdispCloseFont</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gfx_mk.o(i.gdispCloseFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gdispCloseFont &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
</UL>

<P><STRONG><a name="[266]"></a>gdispGBlitArea</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, gfx_mk.o(i.gdispGBlitArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gdispGBlitArea &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_fill_area
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_draw_pixel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[104]"></a>gdispGClear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gfx_mk.o(i.gdispGClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gdispGClear &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_fill_area
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[267]"></a>gdispGDrawArc</STRONG> (Thumb, 3658 bytes, Stack size 136 bytes, gfx_mk.o(i.gdispGDrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gdispGDrawArc &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawRoundedBox
</UL>

<P><STRONG><a name="[1fd]"></a>gdispGDrawBox</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gfx_mk.o(i.gdispGDrawBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gdispGDrawBox &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Transparent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Rounded
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawRoundedBox
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDrawFocusRect
</UL>

<P><STRONG><a name="[269]"></a>gdispGDrawChar</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, gfx_mk.o(i.gdispGDrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gdispGDrawChar &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[26b]"></a>gdispGDrawCircle</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, gfx_mk.o(i.gdispGDrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gdispGDrawCircle &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
</UL>

<P><STRONG><a name="[10e]"></a>gdispGDrawLine</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, gfx_mk.o(i.gdispGDrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gdispGDrawLine &rArr; line_clip &rArr; vline_clip &rArr; drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCrossDraw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawRoundedBox
</UL>

<P><STRONG><a name="[26d]"></a>gdispGDrawPixel</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gfx_mk.o(i.gdispGDrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gdispGDrawPixel &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[26e]"></a>gdispGDrawRoundedBox</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, gfx_mk.o(i.gdispGDrawRoundedBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = gdispGDrawRoundedBox &rArr; gdispGDrawArc &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Rounded
</UL>

<P><STRONG><a name="[26f]"></a>gdispGDrawStringBox</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, gfx_mk.o(i.gdispGDrawStringBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gdispGDrawStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Rounded
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[271]"></a>gdispGFillArc</STRONG> (Thumb, 5992 bytes, Stack size 144 bytes, gfx_mk.o(i.gdispGFillArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gdispGFillArc &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillRoundedBox
</UL>

<P><STRONG><a name="[107]"></a>gdispGFillArea</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, gfx_mk.o(i.gdispGFillArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gdispGFillArea &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Std
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinClear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Rounded
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillRoundedBox
</UL>

<P><STRONG><a name="[272]"></a>gdispGFillCircle</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, gfx_mk.o(i.gdispGFillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gdispGFillCircle &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
</UL>

<P><STRONG><a name="[273]"></a>gdispGFillRoundedBox</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, gfx_mk.o(i.gdispGFillRoundedBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gdispGFillRoundedBox &rArr; gdispGFillArc &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Rounded
</UL>

<P><STRONG><a name="[105]"></a>gdispGFillStringBox</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, gfx_mk.o(i.gdispGFillStringBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Rounded
</UL>

<P><STRONG><a name="[102]"></a>gdispGGetHeight</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispGGetHeight))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCalculate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>

<P><STRONG><a name="[10a]"></a>gdispGGetOrientation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispGGetOrientation))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCalculate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
</UL>

<P><STRONG><a name="[101]"></a>gdispGGetWidth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispGGetWidth))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCalculate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>

<P><STRONG><a name="[17a]"></a>gdispGImageDraw</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, gfx_mk.o(i.gdispGImageDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gdispGImageDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
</UL>

<P><STRONG><a name="[4]"></a>gdispGImageDraw_BMP</STRONG> (Thumb, 610 bytes, Stack size 80 bytes, gfx_mk.o(i.gdispGImageDraw_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = gdispGImageDraw_BMP &rArr; gdispGBlitArea &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>gdispGSetClip</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gfx_mk.o(i.gdispGSetClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispPostInitDriver
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>

<P><STRONG><a name="[276]"></a>gdispGetCharWidth</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gfx_mk.o(i.gdispGetCharWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gdispGetCharWidth &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[283]"></a>gdispGetFontMetric</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispGetFontMetric))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getheight
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>

<P><STRONG><a name="[1cb]"></a>gdispGetStringWidth</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gfx_mk.o(i.gdispGetStringWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getwidth
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditMouseDown
</UL>

<P><STRONG><a name="[1cc]"></a>gdispGetStringWidthCount</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gfx_mk.o(i.gdispGetStringWidthCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditMouseDown
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidth
</UL>

<P><STRONG><a name="[8]"></a>gdispImageAdjustPalette_BMP</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, gfx_mk.o(i.gdispImageAdjustPalette_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gdispImageAdjustPalette_BMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[278]"></a>gdispImageAlloc</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, gfx_mk.o(i.gdispImageAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gdispImageAlloc &rArr; gfxAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageCache_BMP
</UL>

<P><STRONG><a name="[3]"></a>gdispImageCache_BMP</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, gfx_mk.o(i.gdispImageCache_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gdispImageCache_BMP &rArr; getPixels &rArr; gfileRead
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[178]"></a>gdispImageClose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gfx_mk.o(i.gdispImageClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gdispImageClose &rArr; gfileClose
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDestroy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
</UL>

<P><STRONG><a name="[2]"></a>gdispImageClose_BMP</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, gfx_mk.o(i.gdispImageClose_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gdispImageClose_BMP &rArr; gdispImageFree &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[279]"></a>gdispImageFree</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gfx_mk.o(i.gdispImageFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gdispImageFree &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose_BMP
</UL>

<P><STRONG><a name="[6]"></a>gdispImageGetPaletteSize_BMP</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispImageGetPaletteSize_BMP))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>gdispImageGetPalette_BMP</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gfx_mk.o(i.gdispImageGetPalette_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdispImageGetPalette_BMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[29d]"></a>gdispImageInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispImageInit))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
</UL>

<P><STRONG><a name="[177]"></a>gdispImageIsOpen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispImageIsOpen))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageDestroy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
</UL>

<P><STRONG><a name="[17b]"></a>gdispImageNext</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gfx_mk.o(i.gdispImageNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdispImageNext
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
</UL>

<P><STRONG><a name="[5]"></a>gdispImageNext_BMP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispImageNext_BMP))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[27a]"></a>gdispImageOpenGFile</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gfx_mk.o(i.gdispImageOpenGFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gdispImageOpenGFile &rArr; gfileSetPos
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
</UL>

<P><STRONG><a name="[1]"></a>gdispImageOpen_BMP</STRONG> (Thumb, 1128 bytes, Stack size 32 bytes, gfx_mk.o(i.gdispImageOpen_BMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gdispImageOpen_BMP &rArr; gdispImageClose_BMP &rArr; gdispImageFree &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileSetPos
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileRead
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose_BMP
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>gdispImageSetBgColor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gfx_mk.o(i.gdispImageSetBgColor))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
</UL>

<P><STRONG><a name="[100]"></a>gdispOpenFont</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gfx_mk.o(i.gdispOpenFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gdispOpenFont
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchfont
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_font_list
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[89]"></a>gdisp_lld_control</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdisp_lld_control
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_backlight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>gdisp_lld_draw_pixel</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_draw_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdisp_lld_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>gdisp_lld_fill_area</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_fill_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gdisp_lld_fill_area
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillarea
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>gdisp_lld_get_pixel_color</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_get_pixel_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gdisp_lld_get_pixel_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>gdisp_lld_init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i.gdisp_lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gdisp_lld_init &rArr; BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_backlight
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2d_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureLcdPins
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gdisp_lld_stm32ltdc.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>gdriverGetInstance</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gfx_mk.o(i.gdriverGetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gdriverGetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispDeInitDriver
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ginputGetMouse
</UL>

<P><STRONG><a name="[1a5]"></a>gdriverGetNext</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gfx_mk.o(i.gdriverGetNext))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MousePoll
</UL>

<P><STRONG><a name="[1eb]"></a>gdriverRegister</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, gfx_mk.o(i.gdriverRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gdriverRegister &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
</UL>

<P><STRONG><a name="[24f]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[202]"></a>geventAttachSource</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gfx_mk.o(i.geventAttachSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = geventAttachSource &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinAttachListener
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[1fb]"></a>geventDetachSourceListeners</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gfx_mk.o(i.geventDetachSourceListeners))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = geventDetachSourceListeners &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAssignments
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
</UL>

<P><STRONG><a name="[285]"></a>geventEventWait</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gfx_mk.o(i.geventEventWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = geventEventWait &rArr; gfxSemWait &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[1c1]"></a>geventGetEventBuffer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gfx_mk.o(i.geventGetEventBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = geventGetEventBuffer &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVirtualKeyEventToListener
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
</UL>

<P><STRONG><a name="[119]"></a>geventGetSourceListener</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gfx_mk.o(i.geventGetSourceListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVirtualKeyEvent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
</UL>

<P><STRONG><a name="[1ff]"></a>geventListenerInit</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gfx_mk.o(i.geventListenerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = geventListenerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[200]"></a>geventRegisterCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfx_mk.o(i.geventRegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = geventRegisterCallback &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[1c2]"></a>geventSendEvent</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gfx_mk.o(i.geventSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVirtualKeyEventToListener
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
</UL>

<P><STRONG><a name="[186]"></a>gfileClose</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gfx_mk.o(i.gfileClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInfo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpenGFile
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose
</UL>

<P><STRONG><a name="[2c0]"></a>gfileExists</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gfx_mk.o(i.gfileExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gfileExists
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[281]"></a>gfileGetPos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfx_mk.o(i.gfileGetPos))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
</UL>

<P><STRONG><a name="[2c2]"></a>gfileGetSize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gfx_mk.o(i.gfileGetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfileGetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[183]"></a>gfileOpen</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gfx_mk.o(i.gfileOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gfileOpen &rArr; testopen
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testopen
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfileFindSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInfo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[21f]"></a>gfileOpenMemory</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gfx_mk.o(i.gfileOpenMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gfileOpenMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfileFindSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDoorOpen
</UL>

<P><STRONG><a name="[27b]"></a>gfileRead</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gfx_mk.o(i.gfileRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gfileRead
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixels
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
</UL>

<P><STRONG><a name="[2c3]"></a>gfileRename</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gfx_mk.o(i.gfileRename))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gfileRename
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[274]"></a>gfileSetPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gfx_mk.o(i.gfileSetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gfileSetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpen_BMP
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpenGFile
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageCache_BMP
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[2c4]"></a>gfileUnmount</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gfx_mk.o(i.gfileUnmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gfileUnmount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[185]"></a>gfileWrite</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gfx_mk.o(i.gfileWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gfileWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInfo
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfnprintg
</UL>

<P><STRONG><a name="[1f2]"></a>gfxAddHeapBlock</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gfx_mk.o(i.gfxAddHeapBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gfxAddHeapBlock &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosHeapInit
</UL>

<P><STRONG><a name="[20d]"></a>gfxAlloc</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gfx_mk.o(i.gfxAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsOpen
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxRealloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageAlloc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>

<P><STRONG><a name="[295]"></a>gfxExit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(i.gfxExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfxExit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
</UL>

<P><STRONG><a name="[1fa]"></a>gfxFree</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, gfx_mk.o(i.gfxFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsOpen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsClose
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanUpDeadThreads
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxRealloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAddHeapBlock
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverRegister
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageFree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispCloseFont
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDestroy
</UL>

<P><STRONG><a name="[2c1]"></a>gfxHalt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(i.gfxHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfxHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
</UL>

<P><STRONG><a name="[288]"></a>gfxInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gfx_mk.o(i.gfxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gfxInit &rArr; _gwinInit &rArr; _gwmInit &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gqueueInit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosPostInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ginputInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gfileInit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_geventInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdriverInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[117]"></a>gfxMillisecondsToTicks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f746g_raw32_ugfx.o(i.gfxMillisecondsToTicks))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
</UL>

<P><STRONG><a name="[115]"></a>gfxMutexEnter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gfx_mk.o(i.gfxMutexEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
</UL>

<P><STRONG><a name="[116]"></a>gfxMutexExit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxMutexExit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGBlitArea
</UL>

<P><STRONG><a name="[1ec]"></a>gfxMutexInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxMutexInit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gdispInitDriver
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_geventInit
</UL>

<P><STRONG><a name="[210]"></a>gfxQueueASyncInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxQueueASyncInit))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
</UL>

<P><STRONG><a name="[1ce]"></a>gfxQueueASyncPut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gfx_mk.o(i.gfxQueueASyncPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfxQueueASyncPut
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemUnlock
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemLock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPutI
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>

<P><STRONG><a name="[28e]"></a>gfxQueueASyncPutI</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxQueueASyncPutI))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
</UL>

<P><STRONG><a name="[1cf]"></a>gfxQueueASyncRemove</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gfx_mk.o(i.gfxQueueASyncRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gfxQueueASyncRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemUnlock
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemLock
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemoveI
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
</UL>

<P><STRONG><a name="[290]"></a>gfxQueueASyncRemoveI</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxQueueASyncRemoveI))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
</UL>

<P><STRONG><a name="[291]"></a>gfxRealloc</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gfx_mk.o(i.gfxRealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gfxRealloc &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizeText
</UL>

<P><STRONG><a name="[1f7]"></a>gfxSemInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxSemInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventListenerInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gtimerInit
</UL>

<P><STRONG><a name="[1d0]"></a>gfxSemSignal</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, gfx_mk.o(i.gfxSemSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gfxSemSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignalI
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>

<P><STRONG><a name="[292]"></a>gfxSemSignalI</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxSemSignalI))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
</UL>

<P><STRONG><a name="[113]"></a>gfxSemWait</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, gfx_mk.o(i.gfxSemWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gfxSemWait &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Delete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventEventWait
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
</UL>

<P><STRONG><a name="[ec]"></a>gfxSleepMilliseconds</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gfx_mk.o(i.gfxSleepMilliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gfxSleepMilliseconds &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[28d]"></a>gfxSystemLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxSystemLock))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
</UL>

<P><STRONG><a name="[114]"></a>gfxSystemTicks</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f746g_raw32_ugfx.o(i.gfxSystemTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gfxSystemTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_SendCommand
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
</UL>

<P><STRONG><a name="[28f]"></a>gfxSystemUnlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i.gfxSystemUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
</UL>

<P><STRONG><a name="[293]"></a>gfxThreadCreate</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gfx_mk.o(i.gfxThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gfxThreadCreate &rArr; __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qadd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_gfx_mk_c_gfxInit___gfxStartThread
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
</UL>

<P><STRONG><a name="[d2]"></a>gfxThreadExit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gfx_mk.o(i.gfxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qpop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_gfx_mk_c_gfxInit___gfxTaskSwitch
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxExit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_gfx_mk_c_gfxInit___gfxStartThread
</UL>

<P><STRONG><a name="[112]"></a>gfxYield</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gfx_mk.o(i.gfxYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanUpDeadThreads
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qpop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qadd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_gfx_mk_c_gfxInit___gfxTaskSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTimerThreadHandler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_reload
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>

<P><STRONG><a name="[203]"></a>ginputGetKeyboard</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gfx_mk.o(i.ginputGetKeyboard))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGKeyboardCreate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[201]"></a>ginputGetMouse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gfx_mk.o(i.ginputGetMouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ginputGetMouse &rArr; gdriverGetInstance
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetInit
</UL>

<P><STRONG><a name="[211]"></a>gtimerInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gtimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
</UL>

<P><STRONG><a name="[1f0]"></a>gtimerIsActive</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gfx_mk.o(i.gtimerIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInitDriver
</UL>

<P><STRONG><a name="[20c]"></a>gtimerJab</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gfx_mk.o(i.gtimerJab))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>

<P><STRONG><a name="[17c]"></a>gtimerStart</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, gfx_mk.o(i.gtimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gtimerStart &rArr; gfxThreadCreate &rArr; __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwmInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmouseInitDriver
</UL>

<P><STRONG><a name="[297]"></a>guiShowPage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui.o(i.guiShowPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = guiShowPage &rArr; gwinSetVisible &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[298]"></a>gwinAttachListener</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gfx_mk.o(i.gwinAttachListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gwinAttachListener &rArr; geventAttachSource &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[9a]"></a>gwinButtonDraw_Normal</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, gfx_mk.o(i.gwinButtonDraw_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gwinButtonDraw_Normal &rArr; gdispGDrawStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getButtonColors
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispBlendColor
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDrawFocusRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>gwinButtonDraw_Rounded</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, gfx_mk.o(i.gwinButtonDraw_Rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = gwinButtonDraw_Rounded &rArr; gdispGFillRoundedBox &rArr; gdispGFillArc &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getButtonColors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillRoundedBox
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawRoundedBox
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(i.createPagePage0)
</UL>
<P><STRONG><a name="[9e]"></a>gwinCheckboxDraw_CheckOnLeft</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, gfx_mk.o(i.gwinCheckboxDraw_CheckOnLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gwinCheckboxDraw_CheckOnLeft &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCheckboxColors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDrawFocusRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[227]"></a>gwinClear</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gfx_mk.o(i.gwinClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = gwinClear &rArr; _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
</UL>

<P><STRONG><a name="[a7]"></a>gwinContainerDraw_Std</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gfx_mk.o(i.gwinContainerDraw_Std))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = gwinContainerDraw_Std &rArr; gwinContainerDraw_Transparent &rArr; gdispGDrawBox &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Transparent
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[29c]"></a>gwinContainerDraw_Transparent</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gfx_mk.o(i.gwinContainerDraw_Transparent))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gwinContainerDraw_Transparent &rArr; gdispGDrawBox &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinContainerDraw_Std
</UL>

<P><STRONG><a name="[1e8]"></a>gwinDestroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gfx_mk.o(i.gwinDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = gwinDestroy &rArr; _gwinDestroy &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerDestroy
</UL>

<P><STRONG><a name="[222]"></a>gwinGButtonCreate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinGButtonCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gwinGButtonCreate &rArr; _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
</UL>

<P><STRONG><a name="[226]"></a>gwinGConsoleCreate</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gfx_mk.o(i.gwinGConsoleCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = gwinGConsoleCreate &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
</UL>

<P><STRONG><a name="[21d]"></a>gwinGContainerCreate</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gfx_mk.o(i.gwinGContainerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gwinGContainerCreate &rArr; _gcontainerCreate &rArr; _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDoorOpen
</UL>

<P><STRONG><a name="[21e]"></a>gwinGImageCreate</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gfx_mk.o(i.gwinGImageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gwinGImageCreate &rArr; gwinSetVisible &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerInit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwindowCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDoorOpen
</UL>

<P><STRONG><a name="[228]"></a>gwinGKeyboardCreate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinGKeyboardCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gwinGKeyboardCreate &rArr; _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ginputGetKeyboard
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
</UL>

<P><STRONG><a name="[10d]"></a>gwinGetDefaultBgColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinGetDefaultBgColor))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageRedraw
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
</UL>

<P><STRONG><a name="[1d2]"></a>gwinGetFirstChild</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gfx_mk.o(i.gwinGetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gwinGetFirstChild
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gcontainerDestroy
</UL>

<P><STRONG><a name="[2a8]"></a>gwinGetFocus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinGetFocus))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinTexteditDefaultDraw
</UL>

<P><STRONG><a name="[1d4]"></a>gwinGetNextWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinGetNextWindow))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwidgetEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Raise
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioGetActive
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinRippleVisibility
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinMoveFocus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFixFocus
</UL>

<P><STRONG><a name="[1d3]"></a>gwinGetSibling</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, gfx_mk.o(i.gwinGetSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gwinGetSibling
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Redraw
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
</UL>

<P><STRONG><a name="[220]"></a>gwinImageOpenGFile</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinImageOpenGFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gwinImageOpenGFile &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageOpenGFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageIsOpen
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDoorOpen
</UL>

<P><STRONG><a name="[a9]"></a>gwinKeyboardDraw_Normal</STRONG> (Thumb, 4322 bytes, Stack size 120 bytes, gfx_mk.o(i.gwinKeyboardDraw_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gwinKeyboardDraw_Normal &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8StrLen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8CharAt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCode2UTF8
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumKeyRows
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>gwinKeyboardGetEventSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinKeyboardGetEventSource))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[a3]"></a>gwinLabelDrawJustifiedLeft</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinLabelDrawJustifiedLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gwinLabelDrawJustifiedLeft &rArr; gwinLabelDraw &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[2a0]"></a>gwinPrintf</STRONG> (Thumb, 630 bytes, Stack size 80 bytes, gfx_mk.o(i.gwinPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = gwinPrintf &rArr; gwinPutChar &rArr; _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consltoa_wd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[2a1]"></a>gwinPutChar</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, gfx_mk.o(i.gwinPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = gwinPutChar &rArr; _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetFontMetric
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetCharWidth
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawStart
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDrawEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPrintf
</UL>

<P><STRONG><a name="[a4]"></a>gwinRadioDraw_Radio</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, gfx_mk.o(i.gwinRadioDraw_Radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = gwinRadioDraw_Radio &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrawColors
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[2a4]"></a>gwinRadioGetActive</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, gfx_mk.o(i.gwinRadioGetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gwinRadioGetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
</UL>

<P><STRONG><a name="[1a8]"></a>gwinRadioPress</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinRadioPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gwinRadioPress &rArr; SendRadioEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendRadioEvent
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioGetActive
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMouseDown
</UL>

<P><STRONG><a name="[224]"></a>gwinRedraw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gfx_mk.o(i.gwinRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gwinRedraw &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[29f]"></a>gwinResize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinResize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gwinResize
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[2a7]"></a>gwinSetDefaultBgColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinSetDefaultBgColor))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[2be]"></a>gwinSetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinSetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[2a5]"></a>gwinSetDefaultStyle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinSetDefaultStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = gwinSetDefaultStyle &rArr; gwinRedraw &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetStyle
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultBgColor
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedraw
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[20a]"></a>gwinSetFocus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinSetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gwinSetFocus &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwidgetEvent
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinMoveFocus
</UL>

<P><STRONG><a name="[223]"></a>gwinSetFont</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinSetFont))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
</UL>

<P><STRONG><a name="[2a6]"></a>gwinSetStyle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinSetStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gwinSetStyle &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
</UL>

<P><STRONG><a name="[1d1]"></a>gwinSetVisible</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfx_mk.o(i.gwinSetVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gwinSetVisible &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerJab
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinRippleVisibility
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiShowPage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGKeyboardCreate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinDestroy
</UL>

<P><STRONG><a name="[ac]"></a>gwinTexteditDefaultDraw</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, gfx_mk.o(i.gwinTexteditDefaultDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gwinTexteditDefaultDraw &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFocus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetFontMetric
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwidgetDrawFocusRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>gwinWidgetClearInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfx_mk.o(i.gwinWidgetClearInit))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDoorOpen
</UL>

<P><STRONG><a name="[2b0]"></a>i2cInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f7_i2c.o(i.i2cInit))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
</UL>

<P><STRONG><a name="[2a9]"></a>i2cRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7_i2c.o(i.i2cRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = i2cRead &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cResetCr2
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cConfigTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadWord
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
</UL>

<P><STRONG><a name="[2ac]"></a>i2cReadByte</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f7_i2c.o(i.i2cReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = i2cReadByte &rArr; i2cRead &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
</UL>

<P><STRONG><a name="[2ae]"></a>i2cReadWord</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32f7_i2c.o(i.i2cReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = i2cReadWord &rArr; i2cRead &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word
</UL>

<P><STRONG><a name="[2ad]"></a>i2cSend</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f7_i2c.o(i.i2cSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = i2cSend &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cResetCr2
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_i2cConfigTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteReg
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadWord
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
</UL>

<P><STRONG><a name="[2af]"></a>i2cWriteReg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, stm32f7_i2c.o(i.i2cWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = i2cWriteReg &rArr; i2cSend &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ugfxfatfsdemo
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPDIFRX_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_QUADSPI_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[26a]"></a>mf_character_width</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gfx_mk.o(i.mf_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_prev_tab
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetCharWidth
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
</UL>

<P><STRONG><a name="[27c]"></a>mf_get_font_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gfx_mk.o(i.mf_get_font_list))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
</UL>

<P><STRONG><a name="[277]"></a>mf_get_string_width</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, gfx_mk.o(i.mf_get_string_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
</UL>

<P><STRONG><a name="[2b5]"></a>mf_getchar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gfx_mk.o(i.mf_getchar))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_spaces
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
</UL>

<P><STRONG><a name="[270]"></a>mf_render_aligned</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, gfx_mk.o(i.mf_render_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strip_spaces
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawStringBox
</UL>

<P><STRONG><a name="[240]"></a>mf_render_character</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, gfx_mk.o(i.mf_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_render_character
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillcharglyph
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharglyph
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawChar
</UL>

<P><STRONG><a name="[2bd]"></a>mf_rewind</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.mf_rewind))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
</UL>

<P><STRONG><a name="[8a]"></a>mf_rlefont_character_width</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gfx_mk.o(i.mf_rlefont_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mf_rlefont_character_width &rArr; find_glyph
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>mf_rlefont_render_character</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, gfx_mk.o(i.mf_rlefont_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mf_rlefont_render_character &rArr; write_glyph_codeword &rArr; write_ref_dictentry &rArr; write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_glyph_codeword
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>mf_scaled_character_width</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gfx_mk.o(i.mf_scaled_character_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mf_scaled_character_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>mf_scaled_render_character</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, gfx_mk.o(i.mf_scaled_render_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mf_scaled_render_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[2b3]"></a>rundisplay</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, gui.o(i.rundisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rundisplay &rArr; gwinPrintf &rArr; gwinPutChar &rArr; _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiShowPage
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createWidgets
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createPagePage0
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDoorOpen
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultStyle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetDefaultFont
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPrintf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardGetEventSource
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinDestroy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinAttachListener
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventListenerInit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventEventWait
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b4]"></a>ugfxfatfsdemo</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usersdcard.o(i.ugfxfatfsdemo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ugfxfatfsdemo &rArr; fnprintg &rArr; vfnprintg &rArr; gfileWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogInfo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxHalt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileWrite
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileUnmount
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileRename
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileGetSize
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileExists
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileClose
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnprintg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>vfnprintg</STRONG> (Thumb, 740 bytes, Stack size 88 bytes, gfx_mk.o(i.vfnprintg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vfnprintg &rArr; gfileWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltoa_wd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnprintg
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[188]"></a>MX_ADC3_Init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>MX_FMC_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>MX_GPIO_Init</STRONG> (Thumb, 1088 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>MX_I2C1_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>MX_I2C3_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>MX_LTDC_Init</STRONG> (Thumb, 238 bytes, Stack size 112 bytes, main.o(i.MX_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>MX_QUADSPI_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_QUADSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_QUADSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>MX_RTC_Init</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, main.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetTimeStamp
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b2]"></a>MX_SDMMC1_SD_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.MX_SDMMC1_SD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>MX_SPDIFRX_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_SPDIFRX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SPDIFRX_Init &rArr; HAL_SPDIFRX_Init &rArr; HAL_SPDIFRX_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPDIFRX_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>MX_SPI2_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>MX_TIM12_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main.o(i.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_TIM12_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>MX_TIM1_Init</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>MX_TIM2_Init</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>MX_TIM3_Init</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, main.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>MX_TIM5_Init</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>MX_TIM8_Init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, main.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b1]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, stm32f7xx_hal_msp.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[212]"></a>_ltdc_init</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, gdisp_lld_stm32ltdc.o(i._ltdc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ltdc_init &rArr; _ltdc_reload &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_reload
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_layer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[214]"></a>_ltdc_layer_init</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, gdisp_lld_stm32ltdc.o(i._ltdc_layer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ltdc_layer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_init
</UL>

<P><STRONG><a name="[213]"></a>_ltdc_reload</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gdisp_lld_stm32ltdc.o(i._ltdc_reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _ltdc_reload &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ltdc_init
</UL>

<P><STRONG><a name="[27f]"></a>configureLcdPins</STRONG> (Thumb, 442 bytes, Stack size 0 bytes, gdisp_lld_stm32ltdc.o(i.configureLcdPins))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[280]"></a>dma2d_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gdisp_lld_stm32ltdc.o(i.dma2d_init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
</UL>

<P><STRONG><a name="[27e]"></a>set_backlight</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gdisp_lld_stm32ltdc.o(i.set_backlight))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_control
</UL>

<P><STRONG><a name="[97]"></a>AfterClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.AfterClear))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>ButtonKeyboard</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gfx_mk.o(i.ButtonKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ButtonKeyboard &rArr; _gwinSendEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>ButtonMouseDown</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gfx_mk.o(i.ButtonMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ButtonMouseDown &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>ButtonMouseUp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gfx_mk.o(i.ButtonMouseUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ButtonMouseUp &rArr; _gwinSendEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinSendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>CalibrateMouse</STRONG> (Thumb, 906 bytes, Stack size 96 bytes, gfx_mk.o(i.CalibrateMouse))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CalibrateMouse &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationTransform
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCrossDraw
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationCalculate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetDefaultBgColor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGSetClip
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetOrientation
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGClear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispCloseFont
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmousePostInitDriver
</UL>

<P><STRONG><a name="[108]"></a>CalibrationCalculate</STRONG> (Thumb, 1080 bytes, Stack size 20 bytes, gfx_mk.o(i.CalibrationCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalibrationCalculate
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetOrientation
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
</UL>

<P><STRONG><a name="[106]"></a>CalibrationCrossDraw</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, gfx_mk.o(i.CalibrationCrossDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CalibrationCrossDraw &rArr; gdispGDrawLine &rArr; line_clip &rArr; vline_clip &rArr; drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
</UL>

<P><STRONG><a name="[109]"></a>CalibrationTransform</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gfx_mk.o(i.CalibrationTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalibrationTransform
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
</UL>

<P><STRONG><a name="[a0]"></a>CheckboxKeyboard</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gfx_mk.o(i.CheckboxKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CheckboxKeyboard &rArr; SendCheckboxEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>CheckboxMouseDown</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gfx_mk.o(i.CheckboxMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CheckboxMouseDown &rArr; SendCheckboxEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheckboxEvent
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>ContainerBorderSize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gfx_mk.o(i.ContainerBorderSize))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>GTimerThreadHandler</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, gfx_mk.o(i.GTimerThreadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GTimerThreadHandler &rArr; gfxSemWait &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexExit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMutexEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i.gtimerStart)
</UL>
<P><STRONG><a name="[10c]"></a>GetMouseReading</STRONG> (Thumb, 998 bytes, Stack size 24 bytes, gfx_mk.o(i.GetMouseReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMouseEvent
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrationTransform
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxMillisecondsToTicks
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetOrientation
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MousePoll
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateMouse
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gmousePostInitDriver
</UL>

<P><STRONG><a name="[a1]"></a>ImageDestroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gfx_mk.o(i.ImageDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ImageDestroy &rArr; gdispImageClose &rArr; gfileClose
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageIsOpen
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>ImageRedraw</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, gfx_mk.o(i.ImageRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ImageRedraw &rArr; gtimerStart &rArr; gfxThreadCreate &rArr; __asm___8_gfx_mk_c_gfxInit___gfxStartThread &rArr; gfxThreadExit &rArr; gfxExit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetDefaultBgColor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtimerStart
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageSetBgColor
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageNext
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageIsOpen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ImageTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(i.ImageTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ImageTimer &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i.ImageRedraw)
</UL>
<P><STRONG><a name="[17d]"></a>KeyFindKey</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, gfx_mk.o(i.KeyFindKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KeyFindKey &rArr; UTF8CharAt
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8StrLen
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTF8CharAt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumKeyRows
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMouseUp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMouseMove
</UL>

<P><STRONG><a name="[aa]"></a>KeyMouseMove</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gfx_mk.o(i.KeyMouseMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = KeyMouseMove &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFindKey
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>KeyMouseUp</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, gfx_mk.o(i.KeyMouseUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyMouseUp &rArr; SendVirtualKeyEvent &rArr; SendVirtualKeyEventToListener &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVirtualKeyEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFindKey
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>MEMRead</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gfx_mk.o(i.MEMRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MEMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>MEMSetpos</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gfx_mk.o(i.MEMSetpos))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>MEMWrite</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gfx_mk.o(i.MEMWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MEMWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>MousePoll</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gfx_mk.o(i.MousePoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MousePoll &rArr; GetMouseReading &rArr; SendMouseEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdriverGetNext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i._gmouseInitDriver)
</UL>
<P><STRONG><a name="[17e]"></a>NumKeyRows</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gfx_mk.o(i.NumKeyRows))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFindKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
</UL>

<P><STRONG><a name="[294]"></a>Qadd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gfx_mk.o(i.Qadd))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadCreate
</UL>

<P><STRONG><a name="[1f5]"></a>Qinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.Qinit))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gosThreadsInit
</UL>

<P><STRONG><a name="[21a]"></a>Qpop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfx_mk.o(i.Qpop))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanUpDeadThreads
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxThreadExit
</UL>

<P><STRONG><a name="[b2]"></a>ROMClose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i.ROMClose))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>ROMEof</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfx_mk.o(i.ROMEof))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ROMExists</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gfx_mk.o(i.ROMExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ROMExists &rArr; ROMFindFile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>ROMFilesize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gfx_mk.o(i.ROMFilesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ROMFilesize &rArr; ROMFindFile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>ROMFindFile</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gfx_mk.o(i.ROMFindFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ROMFindFile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMOpen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFilesize
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMExists
</UL>

<P><STRONG><a name="[b5]"></a>ROMGetsize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.ROMGetsize))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>ROMOpen</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gfx_mk.o(i.ROMOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ROMOpen &rArr; ROMFindFile &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROMFindFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>ROMRead</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gfx_mk.o(i.ROMRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>ROMSetpos</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gfx_mk.o(i.ROMSetpos))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>RadioMouseDown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gfx_mk.o(i.RadioMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RadioMouseDown &rArr; gwinRadioPress &rArr; SendRadioEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>RedrawTimerFn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(i.RedrawTimerFn))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RedrawTimerFn &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i._gwmInit)
</UL>
<P><STRONG><a name="[10f]"></a>SendCheckboxEvent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gfx_mk.o(i.SendCheckboxEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SendCheckboxEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckboxMouseDown
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckboxKeyboard
</UL>

<P><STRONG><a name="[118]"></a>SendMouseEvent</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, gfx_mk.o(i.SendMouseEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SendMouseEvent &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMouseReading
</UL>

<P><STRONG><a name="[1c3]"></a>SendRadioEvent</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gfx_mk.o(i.SendRadioEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SendRadioEvent &rArr; geventGetSourceListener &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioPress
</UL>

<P><STRONG><a name="[181]"></a>SendVirtualKeyEvent</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gfx_mk.o(i.SendVirtualKeyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SendVirtualKeyEvent &rArr; SendVirtualKeyEventToListener &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVirtualKeyEventToListener
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetSourceListener
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMouseUp
</UL>

<P><STRONG><a name="[1c4]"></a>SendVirtualKeyEventToListener</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gfx_mk.o(i.SendVirtualKeyEventToListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SendVirtualKeyEventToListener &rArr; geventSendEvent &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCode2UTF8
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventSendEvent
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventGetEventBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVirtualKeyEvent
</UL>

<P><STRONG><a name="[ae]"></a>TextEditKeyboard</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, gfx_mk.o(i.TextEditKeyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TextEditKeyboard &rArr; _gwinMoveFocus &rArr; gwinSetFocus &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizeText
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinMoveFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>TextEditMouseDown</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gfx_mk.o(i.TextEditMouseDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TextEditMouseDown &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidthCount
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidth
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>UCode2UTF8</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, gfx_mk.o(i.UCode2UTF8))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVirtualKeyEventToListener
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
</UL>

<P><STRONG><a name="[180]"></a>UTF8CharAt</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, gfx_mk.o(i.UTF8CharAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTF8CharAt
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFindKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
</UL>

<P><STRONG><a name="[17f]"></a>UTF8StrLen</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, gfx_mk.o(i.UTF8StrLen))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFindKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardDraw_Normal
</UL>

<P><STRONG><a name="[90]"></a>WM_Add</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gfx_mk.o(i.WM_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = WM_Add &rArr; WM_Size &rArr; WM_Move &rArr;  WM_Size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>WM_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i.WM_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>WM_Delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gfx_mk.o(i.WM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WM_Delete &rArr; gfxSemWait &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>WM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i.WM_Init))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>WM_MinMax</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gfx_mk.o(i.WM_MinMax))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>WM_Move</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, gfx_mk.o(i.WM_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + In Cycle
<LI>Call Chain = WM_Move &rArr;  WM_Size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Size
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>WM_Raise</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, gfx_mk.o(i.WM_Raise))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WM_Raise &rArr; gfxSemWait &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemWait
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncRemove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxQueueASyncPut
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>WM_Redraw</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, gfx_mk.o(i.WM_Redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WM_Redraw &rArr; gdispGFillArea &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetDefaultBgColor
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>WM_Size</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, gfx_mk.o(i.WM_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = WM_Size &rArr; WM_Move &rArr;  WM_Size (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetSibling
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetFirstChild
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinUpdate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinFlushRedraws
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Move
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>check_fs</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gfx_mk.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[231]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gfx_mk.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[219]"></a>cleanUpDeadThreads</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gfx_mk.o(i.cleanUpDeadThreads))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Qpop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxYield
</UL>

<P><STRONG><a name="[239]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gfx_mk.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[2a2]"></a>consltoa_wd</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, gfx_mk.o(i.consltoa_wd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = consltoa_wd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinPrintf
</UL>

<P><STRONG><a name="[22a]"></a>create_chain</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, gfx_mk.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[22d]"></a>create_name</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, gfx_mk.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[22f]"></a>dbc_1st</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gfx_mk.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[230]"></a>dbc_2nd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gfx_mk.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[232]"></a>deleteAssignments</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gfx_mk.o(i.deleteAssignments))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = deleteAssignments &rArr; doExitEvent &rArr; gfxSemSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doExitEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventDetachSourceListeners
</UL>

<P><STRONG><a name="[234]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gfx_mk.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[237]"></a>dir_clear</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gfx_mk.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[23b]"></a>dir_find</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gfx_mk.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[236]"></a>dir_next</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, gfx_mk.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[23c]"></a>dir_read</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gfx_mk.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[23d]"></a>dir_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gfx_mk.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[23f]"></a>dir_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gfx_mk.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dir_remove &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[235]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gfx_mk.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[233]"></a>doExitEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gfx_mk.o(i.doExitEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = doExitEvent &rArr; gfxSemSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSemSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteAssignments
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventRegisterCallback
</UL>

<P><STRONG><a name="[7e]"></a>drawcharglyph</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gfx_mk.o(i.drawcharglyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drawcharglyph &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i.gdispGDrawStringBox)
</UL>
<P><STRONG><a name="[7d]"></a>drawcharline</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gfx_mk.o(i.drawcharline))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drawcharline &rArr; hline_clip &rArr; drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gfx_mk.o(i.drawcharglyph)
<LI> gfx_mk.o(i.fillcharglyph)
<LI> gfx_mk.o(i.gdispGDrawChar)
</UL>
<P><STRONG><a name="[242]"></a>drawpixel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(i.drawpixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_draw_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>

<P><STRONG><a name="[243]"></a>drawpixel_clip</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gfx_mk.o(i.drawpixel_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drawpixel_clip &rArr; drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawPixel
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawCircle
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawArc
</UL>

<P><STRONG><a name="[bc]"></a>fatfsClose</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gfx_mk.o(i.fatfsClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fatfsClose &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>fatfsDel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gfx_mk.o(i.fatfsDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fatfsDel &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>fatfsEOF</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gfx_mk.o(i.fatfsEOF))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>fatfsExists</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, gfx_mk.o(i.fatfsExists))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fatfsExists &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>fatfsFileSize</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, gfx_mk.o(i.fatfsFileSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fatfsFileSize &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>fatfsGetSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gfx_mk.o(i.fatfsGetSize))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>fatfsMount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gfx_mk.o(i.fatfsMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fatfsMount &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>fatfsOpen</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gfx_mk.o(i.fatfsOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fatfsOpen &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_flags2mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxFree
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxAlloc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>fatfsRead</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, gfx_mk.o(i.fatfsRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fatfsRead &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>fatfsRename</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gfx_mk.o(i.fatfsRename))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fatfsRename &rArr; f_rename &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>fatfsSetPos</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gfx_mk.o(i.fatfsSetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fatfsSetPos &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>fatfsSync</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gfx_mk.o(i.fatfsSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fatfsSync &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>fatfsUnmount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gfx_mk.o(i.fatfsUnmount))
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>fatfsWrite</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gfx_mk.o(i.fatfsWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fatfsWrite &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>fatfs_flags2mode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gfx_mk.o(i.fatfs_flags2mode))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfsOpen
</UL>

<P><STRONG><a name="[25d]"></a>fillarea</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gfx_mk.o(i.fillarea))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fillarea &rArr; gdisp_lld_fill_area
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_fill_area
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArea
</UL>

<P><STRONG><a name="[7f]"></a>fillcharglyph</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, gfx_mk.o(i.fillcharglyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fillcharglyph &rArr; mf_render_character
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i.gdispGFillStringBox)
</UL>
<P><STRONG><a name="[2c7]"></a>fillentry_bitcount</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gfx_mk.o(i.fillentry_bitcount))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>

<P><STRONG><a name="[2ba]"></a>find_glyph</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gfx_mk.o(i.find_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_render_character
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_character_width
</UL>

<P><STRONG><a name="[24b]"></a>find_volume</STRONG> (Thumb, 758 bytes, Stack size 88 bytes, gfx_mk.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[24d]"></a>follow_path</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, gfx_mk.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[299]"></a>getButtonColors</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gfx_mk.o(i.getButtonColors))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Rounded
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinButtonDraw_Normal
</UL>

<P><STRONG><a name="[29b]"></a>getCheckboxColors</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gfx_mk.o(i.getCheckboxColors))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinCheckboxDraw_CheckOnLeft
</UL>

<P><STRONG><a name="[2a3]"></a>getDrawColors</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gfx_mk.o(i.getDrawColors))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRadioDraw_Radio
</UL>

<P><STRONG><a name="[275]"></a>getPixels</STRONG> (Thumb, 2124 bytes, Stack size 40 bytes, gfx_mk.o(i.getPixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getPixels &rArr; gfileRead
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileRead
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileGetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispImageCache_BMP
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGImageDraw_BMP
</UL>

<P><STRONG><a name="[22b]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gfx_mk.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[258]"></a>get_fileinfo</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gfx_mk.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_fileinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[24a]"></a>get_ldnumber</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, gfx_mk.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[282]"></a>getheight</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gfx_mk.o(i.getheight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getheight
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetFontMetric
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[284]"></a>getwidth</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gfx_mk.o(i.getwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = getwidth &rArr; gdispGetStringWidth &rArr; gdispGetStringWidthCount &rArr; mf_get_string_width &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGetStringWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDraw
</UL>

<P><STRONG><a name="[7a]"></a>gwidgetEvent</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, gfx_mk.o(i.gwidgetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = gwidgetEvent &rArr; _gwinMoveFocus &rArr; gwinSetFocus &rArr; _gwinUpdate &rArr; gtimerJab &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFocus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGetNextWindow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gwinMoveFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i._gwidgetInit)
</UL>
<P><STRONG><a name="[29e]"></a>gwinLabelDraw</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, gfx_mk.o(i.gwinLabelDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gwinLabelDraw &rArr; gdispGFillStringBox &rArr; mf_render_aligned &rArr; render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getwidth
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getheight
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinResize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillStringBox
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinLabelDrawJustifiedLeft
</UL>

<P><STRONG><a name="[241]"></a>hline_clip</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, gfx_mk.o(i.hline_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hline_clip &rArr; drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_fill_area
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawcharline
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillCircle
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGFillArc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>

<P><STRONG><a name="[24e]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gfx_mk.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[253]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gfx_mk.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[217]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gfx_mk.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[26c]"></a>line_clip</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, gfx_mk.o(i.line_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = line_clip &rArr; vline_clip &rArr; drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vline_clip
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hline_clip
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel_clip
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawLine
</UL>

<P><STRONG><a name="[2c5]"></a>ltoa_wd</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, gfx_mk.o(i.ltoa_wd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltoa_wd
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfnprintg
</UL>

<P><STRONG><a name="[27d]"></a>matchfont</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, gfx_mk.o(i.matchfont))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispOpenFont
</UL>

<P><STRONG><a name="[218]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, gfx_mk.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[23e]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gfx_mk.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[22e]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gfx_mk.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2bc]"></a>mf_round_to_prev_tab</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gfx_mk.o(i.mf_round_to_prev_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_right
</UL>

<P><STRONG><a name="[2b6]"></a>mf_round_to_tab</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gfx_mk.o(i.mf_round_to_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;render_left
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_string_width
</UL>

<P><STRONG><a name="[216]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gfx_mk.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[22c]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, gfx_mk.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[252]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, gfx_mk.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[2b8]"></a>render_left</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, gfx_mk.o(i.render_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = render_left &rArr; mf_round_to_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_tab
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>

<P><STRONG><a name="[2b9]"></a>render_right</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, gfx_mk.o(i.render_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = render_right &rArr; mf_round_to_prev_tab &rArr; mf_character_width
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_round_to_prev_tab
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rewind
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_character_width
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>

<P><STRONG><a name="[1c9]"></a>resizeText</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gfx_mk.o(i.resizeText))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = resizeText &rArr; gfxRealloc &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxRealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextEditKeyboard
</UL>

<P><STRONG><a name="[81]"></a>scaled_pixel_callback</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, gfx_mk.o(i.scaled_pixel_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scaled_pixel_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gfx_mk.o(i.mf_scaled_render_character)
</UL>
<P><STRONG><a name="[2c9]"></a>skip_pixels</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gfx_mk.o(i.skip_pixels))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rle_dictentry
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>

<P><STRONG><a name="[251]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gfx_mk.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[250]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gfx_mk.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[259]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gfx_mk.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[2b7]"></a>strip_spaces</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gfx_mk.o(i.strip_spaces))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_render_aligned
</UL>

<P><STRONG><a name="[256]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gfx_mk.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[238]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gfx_mk.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[287]"></a>testopen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gfx_mk.o(i.testopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = testopen
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpen
</UL>

<P><STRONG><a name="[246]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gfx_mk.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[268]"></a>vline_clip</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, gfx_mk.o(i.vline_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vline_clip &rArr; drawpixel &rArr; gdisp_lld_draw_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawpixel
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdisp_lld_fill_area
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_clip
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGDrawBox
</UL>

<P><STRONG><a name="[2c6]"></a>write_bin_codeword</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gfx_mk.o(i.write_bin_codeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_bin_codeword &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pixels
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_pixels
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillentry_bitcount
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>

<P><STRONG><a name="[2bb]"></a>write_glyph_codeword</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gfx_mk.o(i.write_glyph_codeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write_glyph_codeword &rArr; write_ref_dictentry &rArr; write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_dictentry
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_rlefont_render_character
</UL>

<P><STRONG><a name="[2c8]"></a>write_pixels</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gfx_mk.o(i.write_pixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rle_dictentry
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>

<P><STRONG><a name="[2cb]"></a>write_ref_codeword</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gfx_mk.o(i.write_ref_codeword))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_rle_dictentry
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pixels
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bin_codeword
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_dictentry
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_glyph_codeword
</UL>

<P><STRONG><a name="[2ca]"></a>write_ref_dictentry</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gfx_mk.o(i.write_ref_dictentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_ref_dictentry &rArr; write_ref_codeword &rArr; write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_glyph_codeword
</UL>

<P><STRONG><a name="[2cc]"></a>write_rle_dictentry</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, gfx_mk.o(i.write_rle_dictentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_rle_dictentry &rArr; write_pixels
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_pixels
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ref_codeword
</UL>

<P><STRONG><a name="[ea]"></a>BSP_SDRAM_Initialization_sequence</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f746g_discovery_sdram.o(i.BSP_SDRAM_Initialization_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_SDRAM_Initialization_sequence &rArr; _HAL_SDRAM_SendCommand &rArr; _FMC_SDRAM_SendCommand &rArr; gfxSystemTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_SendCommand
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[e8]"></a>BSP_SDRAM_MspInit</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, stm32f746g_discovery_sdram.o(i.BSP_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_DMA_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[1d6]"></a>_FMC_SDRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1d8]"></a>_FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[1d5]"></a>_FMC_SDRAM_SendCommand</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _FMC_SDRAM_SendCommand &rArr; gfxSystemTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSystemTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[1d7]"></a>_FMC_SDRAM_Timing_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[ef]"></a>_HAL_DMA_DeInit</STRONG> (Thumb, 3932 bytes, Stack size 0 bytes, stm32f746g_discovery_sdram.o(i._HAL_DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[f0]"></a>_HAL_DMA_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f746g_discovery_sdram.o(i._HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[e9]"></a>_HAL_SDRAM_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HAL_SDRAM_Init &rArr; _FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_Timing_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[ed]"></a>_HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[eb]"></a>_HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f746g_discovery_sdram.o(i._HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _HAL_SDRAM_SendCommand &rArr; _FMC_SDRAM_SendCommand &rArr; gfxSystemTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_sequence
</UL>

<P><STRONG><a name="[cb]"></a>ft5336Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.ft5336Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ft5336Init &rArr; read_byte &rArr; i2cReadByte &rArr; i2cRead &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_board
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfxSleepMilliseconds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>ft5336ReadXYZ</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.ft5336ReadXYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ft5336ReadXYZ &rArr; read_word &rArr; i2cReadWord &rArr; i2cRead &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gmouse_lld_ft5336.o(.constdata)
</UL>
<P><STRONG><a name="[262]"></a>init_board</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.init_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_board
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
</UL>

<P><STRONG><a name="[263]"></a>read_byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = read_byte &rArr; i2cReadByte &rArr; i2cRead &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336ReadXYZ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
</UL>

<P><STRONG><a name="[265]"></a>read_word</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = read_word &rArr; i2cReadWord &rArr; i2cRead &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336ReadXYZ
</UL>

<P><STRONG><a name="[264]"></a>write_reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gmouse_lld_ft5336.o(i.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = write_reg &rArr; i2cWriteReg &rArr; i2cSend &rArr; _i2cConfigTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336Init
</UL>

<P><STRONG><a name="[2aa]"></a>_i2cConfigTransfer</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, stm32f7_i2c.o(i._i2cConfigTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _i2cConfigTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[2ab]"></a>_i2cResetCr2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7_i2c.o(i._i2cResetCr2))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSend
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cRead
</UL>

<P><STRONG><a name="[21b]"></a>createDoorOpen</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gui.o(i.createDoorOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = createDoorOpen &rArr; gwinGContainerCreate &rArr; _gcontainerCreate &rArr; _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinWidgetClearInit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpenMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[221]"></a>createPagePage0</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, gui.o(i.createPagePage0))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = createPagePage0 &rArr; gwinGContainerCreate &rArr; _gcontainerCreate &rArr; _gwidgetCreate &rArr; _gwindowCreate &rArr; _gwinWMAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinWidgetClearInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetFont
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinRedraw
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinImageOpenGFile
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGImageCreate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGContainerCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGButtonCreate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfileOpenMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[225]"></a>createWidgets</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, gui.o(i.createWidgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = createWidgets &rArr; gwinClear &rArr; _gwinDrawStart &rArr; _gwinDrawEnd &rArr; _gwinFlushRedraws &rArr; gdispGSetClip &rArr; gfxMutexEnter &rArr; gfxYield &rArr; cleanUpDeadThreads &rArr; gfxFree
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinWidgetClearInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinSetVisible
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinKeyboardGetEventSource
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGKeyboardCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinGConsoleCreate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gwinClear
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;geventAttachSource
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetWidth
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdispGGetHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rundisplay
</UL>

<P><STRONG><a name="[1b1]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdError))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
</UL>

<P><STRONG><a name="[1ac]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[1b6]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[1ae]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[1bb]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[1b3]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f7xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[1be]"></a>SD_FindSCR</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f7xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[150]"></a>SD_InitCard</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, stm32f7xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[14f]"></a>SD_PowerON</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[14b]"></a>SD_SendStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f7xx_hal_sd.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_SendStatus &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[149]"></a>SD_WideBus_Disable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[148]"></a>SD_WideBus_Enable</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f7xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[12d]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[12e]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[12a]"></a>LTDC_SetConfig</STRONG> (Thumb, 530 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[166]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[165]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[167]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[11c]"></a>ADC_Init</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, stm32f7xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[16e]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[16f]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[133]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
